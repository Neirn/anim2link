<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AA/x/AAf//gAP//4AD//+AB///4D//////8=
</value>
  </data>
</root>